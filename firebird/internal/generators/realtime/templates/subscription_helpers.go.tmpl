// Code generated by Firebird. DO NOT EDIT.

package realtime

import (
	"context"
	"fmt"
{{- range .Models }}
{{- if eq .PKType "uuid.UUID" }}
	"github.com/google/uuid"
{{- end }}
{{- end }}
)

// Generated subscription helpers for easy event filtering
{{- range .Models }}

// Subscribe{{ .Name }}Events subscribes to all events for a specific {{ .Name }}
func Subscribe{{ .Name }}Events(ctx context.Context, conn *Connection, id {{ .PKType }}) error {
	topic := fmt.Sprintf("{{ .NamePlural }}.%v.*", id)
	return conn.Subscribe(ctx, topic)
}

// Subscribe{{ .Name }}Created subscribes to creation events for a specific {{ .Name }}
func Subscribe{{ .Name }}Created(ctx context.Context, conn *Connection, id {{ .PKType }}) error {
	topic := fmt.Sprintf("{{ .NamePlural }}.%v.created", id)
	return conn.Subscribe(ctx, topic)
}

// Subscribe{{ .Name }}Updated subscribes to update events for a specific {{ .Name }}
func Subscribe{{ .Name }}Updated(ctx context.Context, conn *Connection, id {{ .PKType }}) error {
	topic := fmt.Sprintf("{{ .NamePlural }}.%v.updated", id)
	return conn.Subscribe(ctx, topic)
}

// Subscribe{{ .Name }}Deleted subscribes to deletion events for a specific {{ .Name }}
func Subscribe{{ .Name }}Deleted(ctx context.Context, conn *Connection, id {{ .PKType }}) error {
	topic := fmt.Sprintf("{{ .NamePlural }}.%v.deleted", id)
	return conn.Subscribe(ctx, topic)
}

// SubscribeAll{{ .Name }}s subscribes to all {{ .Name }} events (any ID)
func SubscribeAll{{ .Name }}s(ctx context.Context, conn *Connection) error {
	return conn.Subscribe(ctx, "{{ .NamePlural }}.*")
}

// SubscribeAll{{ .Name }}sCreated subscribes to all {{ .Name }} creation events
func SubscribeAll{{ .Name }}sCreated(ctx context.Context, conn *Connection) error {
	return conn.Subscribe(ctx, "{{ .NamePlural }}.*.created")
}

// SubscribeAll{{ .Name }}sUpdated subscribes to all {{ .Name }} update events
func SubscribeAll{{ .Name }}sUpdated(ctx context.Context, conn *Connection) error {
	return conn.Subscribe(ctx, "{{ .NamePlural }}.*.updated")
}

// SubscribeAll{{ .Name }}sDeleted subscribes to all {{ .Name }} deletion events
func SubscribeAll{{ .Name }}sDeleted(ctx context.Context, conn *Connection) error {
	return conn.Subscribe(ctx, "{{ .NamePlural }}.*.deleted")
}
{{- end }}

// Usage examples:
//
// Subscribe to all events for Post ID 123:
//   SubscribePostEvents(ctx, conn, postID)
//
// Subscribe to only creation events for a specific Post:
//   SubscribePostCreated(ctx, conn, postID)
//
// Subscribe to ALL Post updates (any ID):
//   SubscribeAllPostsUpdated(ctx, conn)
