// Code generated by Firebird. DO NOT EDIT.

package handlers

import (
	"log/slog"
	"net/http"

	"github.com/gorilla/websocket"
	"{{ .ModulePath }}/internal/realtime"
)

var upgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin: func(r *http.Request) bool {
		// TODO: Implement proper CORS check
		return true
	},
}

// WebSocketHandler handles WebSocket connections
type WebSocketHandler struct {
	manager *realtime.ConnectionManager
	logger  *slog.Logger
}

// NewWebSocketHandler creates a new WebSocket handler
func NewWebSocketHandler(manager *realtime.ConnectionManager, logger *slog.Logger) *WebSocketHandler {
	return &WebSocketHandler{
		manager: manager,
		logger:  logger,
	}
}

// HandleWebSocket upgrades HTTP to WebSocket and manages the connection
func (h *WebSocketHandler) HandleWebSocket(w http.ResponseWriter, r *http.Request) {
	// Upgrade connection
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		h.logger.Error("failed to upgrade connection",
			slog.String("error", err.Error()),
		)
		return
	}

	// Register connection
	connection := h.manager.Register(conn)

	// Start read/write pumps
	go connection.WritePump()
	go connection.ReadPump()

	h.logger.Info("websocket connection established",
		slog.String("connection_id", connection.ID),
		slog.String("remote_addr", r.RemoteAddr),
	)
}
