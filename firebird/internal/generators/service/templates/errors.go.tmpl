// Code generated by Firebird. Edit freely - this file is yours.
package services

import (
	"errors"
	"fmt"
)

// Sentinel errors for common service-level failures
var (
	ErrNotFound      = errors.New("resource not found")
	ErrAlreadyExists = errors.New("resource already exists")
	ErrInvalidInput  = errors.New("invalid input")
	ErrUnauthorized  = errors.New("unauthorized")
	ErrForbidden     = errors.New("forbidden")
)

// ValidationError wraps validation failures with context
type ValidationError struct {
	Field   string
	Message string
	Err     error
}

func (e *ValidationError) Error() string {
	if e.Field != "" {
		return fmt.Sprintf("%s: %s", e.Field, e.Message)
	}
	return e.Message
}

func (e *ValidationError) Unwrap() error {
	if e.Err != nil {
		return e.Err
	}
	return ErrInvalidInput
}

// NewValidationError creates a validation error from validator errors
func NewValidationError(err error) error {
	return &ValidationError{
		Message: "validation failed",
		Err:     err,
	}
}

// TODO: Add custom error types here
// Example:
//
// type ConflictError struct {
//     Resource string
//     Field    string
//     Value    string
// }
//
// func (e *ConflictError) Error() string {
//     return fmt.Sprintf("%s with %s='%s' already exists", e.Resource, e.Field, e.Value)
// }
//
// func (e *ConflictError) Unwrap() error {
//     return ErrAlreadyExists
// }
