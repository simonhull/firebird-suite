// Code generated by Firebird. DO NOT EDIT.
// This file is regenerated when the schema changes.

package repositories

import (
	"context"

	"{{ .ModulePath }}/db"
)

// {{ .ModelName }}RepositoryBase provides generated CRUD operations.
// Embed this in your {{ .ModelName }}Repository to inherit these methods.
type {{ .ModelName }}RepositoryBase struct {
	queries *db.Queries
}

// Create creates a new {{ .ModelName }}.
func (r *{{ .ModelName }}RepositoryBase) Create(ctx context.Context, params db.Create{{ .ModelName }}Params) (*db.{{ .ModelName }}, error) {
	return r.queries.Create{{ .ModelName }}(ctx, params)
}

// GetByID retrieves a {{ .ModelName }} by ID.
func (r *{{ .ModelName }}RepositoryBase) GetByID(ctx context.Context, id {{ .PrimaryKeyType }}) (*db.{{ .ModelName }}, error) {
	return r.queries.Get{{ .ModelName }}(ctx, id)
}

// List retrieves all {{ .ModelName }}s.
func (r *{{ .ModelName }}RepositoryBase) List(ctx context.Context) ([]db.{{ .ModelName }}, error) {
	return r.queries.List{{ .ModelName }}s(ctx)
}

// ListPaginated retrieves {{ .ModelName }}s with pagination.
func (r *{{ .ModelName }}RepositoryBase) ListPaginated(ctx context.Context, limit, offset int32) ([]db.{{ .ModelName }}, error) {
	return r.queries.List{{ .ModelName }}sPaginated(ctx, db.List{{ .ModelName }}sPaginatedParams{
		Limit:  limit,
		Offset: offset,
	})
}

// Count returns the total number of {{ .ModelName }}s.
func (r *{{ .ModelName }}RepositoryBase) Count(ctx context.Context) (int64, error) {
	return r.queries.Count{{ .ModelName }}s(ctx)
}

// Update updates a {{ .ModelName }}.
func (r *{{ .ModelName }}RepositoryBase) Update(ctx context.Context, params db.Update{{ .ModelName }}Params) (*db.{{ .ModelName }}, error) {
	return r.queries.Update{{ .ModelName }}(ctx, params)
}

// Delete deletes a {{ .ModelName }}.
{{- if .SoftDeletes }}
// Note: This performs a soft delete (sets deleted_at timestamp).
{{- end }}
func (r *{{ .ModelName }}RepositoryBase) Delete(ctx context.Context, id {{ .PrimaryKeyType }}) error {
	return r.queries.Delete{{ .ModelName }}(ctx, id)
}
{{- if .SoftDeletes }}

// Restore restores a soft-deleted {{ .ModelName }}.
func (r *{{ .ModelName }}RepositoryBase) Restore(ctx context.Context, id {{ .PrimaryKeyType }}) error {
	return r.queries.Restore{{ .ModelName }}(ctx, id)
}
{{- end }}
