// Code generated by Firebird. DO NOT EDIT.
// Generated: {{ .GeneratedAt }}

package modules

// ModuleRegistry provides service discovery for Firebird modules
// Modules register their services here during initialization
type ModuleRegistry struct {
	services map[string]interface{}
}

// NewModuleRegistry creates a new module registry
func NewModuleRegistry() *ModuleRegistry {
	return &ModuleRegistry{
		services: make(map[string]interface{}),
	}
}

// Register adds a service to the registry
// name should be in format "module.ServiceName" (e.g., "falcon.AuthService")
func (r *ModuleRegistry) Register(name string, service interface{}) {
	r.services[name] = service
}

// Get retrieves a service from the registry
// Returns (service, true) if found, (nil, false) if not found
func (r *ModuleRegistry) Get(name string) (interface{}, bool) {
	svc, ok := r.services[name]
	return svc, ok
}

// MustGet retrieves a service or panics if not found
// Use this when a service dependency is required
func (r *ModuleRegistry) MustGet(name string) interface{} {
	svc, ok := r.services[name]
	if !ok {
		panic("module service not found: " + name)
	}
	return svc
}

// Has checks if a service is registered
func (r *ModuleRegistry) Has(name string) bool {
	_, ok := r.services[name]
	return ok
}
