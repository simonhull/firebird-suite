// Code generated by Firebird. DO NOT EDIT.
package middleware

import (
	"fmt"
	"log/slog"
	"net/http"
	"runtime/debug"
)

// Recovery creates panic recovery middleware
func Recovery(logger *slog.Logger) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			defer func() {
				if err := recover(); err != nil {
					// Log the panic with stack trace
					requestID := GetRequestID(r.Context())

					logger.ErrorContext(r.Context(),
						"panic recovered",
						slog.String("request_id", requestID),
						slog.String("method", r.Method),
						slog.String("path", r.URL.Path),
						slog.Any("error", err),
						slog.String("stack", string(debug.Stack())),
					)

					// Return 500 error
					w.WriteHeader(http.StatusInternalServerError)
					fmt.Fprintf(w, "Internal Server Error")
				}
			}()

			next.ServeHTTP(w, r)
		})
	}
}
