// Code generated by Firebird. DO NOT EDIT.

package events

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"
	"time"
)

// Event represents a real-time event
type Event struct {
	Topic     string                 `json:"topic"`
	Data      interface{}            `json:"data"`
	Metadata  map[string]interface{} `json:"metadata,omitempty"`
	Timestamp time.Time              `json:"timestamp"`
}

// EventBus is the interface for publishing and subscribing to events
type EventBus interface {
	// Publish sends an event to all subscribers of the topic
	Publish(ctx context.Context, topic string, data interface{}) error

	// Subscribe returns a channel that receives events for the given topic pattern
	// Pattern supports wildcards: "posts.*" matches "posts.created", "posts.updated"
	Subscribe(ctx context.Context, pattern string) (<-chan Event, error)

	// Unsubscribe removes a subscription
	Unsubscribe(pattern string) error

	// Close shuts down the event bus
	Close() error
}

// MarshalEvent converts an event to JSON
func MarshalEvent(e Event) ([]byte, error) {
	return json.Marshal(e)
}

// UnmarshalEvent converts JSON to an event
func UnmarshalEvent(data []byte) (*Event, error) {
	var e Event
	if err := json.Unmarshal(data, &e); err != nil {
		return nil, err
	}
	return &e, nil
}

// MatchTopic checks if a topic matches a pattern with wildcards
// Pattern "posts.*" matches "posts.created", "posts.updated", etc.
// Pattern "posts.*.created" matches "posts.123.created", "posts.456.created", etc.
func MatchTopic(pattern, topic string) bool {
	// Wildcard all
	if pattern == "*" {
		return true
	}

	// Exact match
	if pattern == topic {
		return true
	}

	// Split by dots
	patternParts := strings.Split(pattern, ".")
	topicParts := strings.Split(topic, ".")

	// Check for trailing wildcard
	trailingWildcard := len(patternParts) > 0 && patternParts[len(patternParts)-1] == "*"

	if trailingWildcard {
		// Pattern ends with *, so topic must have at least as many parts (minus the *)
		if len(topicParts) < len(patternParts)-1 {
			return false
		}
		// Remove trailing wildcard for comparison
		patternParts = patternParts[:len(patternParts)-1]
	} else {
		// No trailing wildcard, must have exact same number of parts
		if len(patternParts) != len(topicParts) {
			return false
		}
	}

	// Match each part (wildcards in middle positions also supported)
	for i, patternPart := range patternParts {
		if patternPart == "*" {
			continue
		}
		if patternPart != topicParts[i] {
			return false
		}
	}

	return true
}
