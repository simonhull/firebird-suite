// Code generated by Firebird. DO NOT EDIT.
package repositories

import (
	"context"

	"{{ .ModulePath }}/db"
)

// {{ .ModelName }}Repository defines the interface for {{ .ModelName }} data access.
// This interface is implemented by both the base and user repository types.
type {{ .ModelName }}Repository interface {
	Create(ctx context.Context, params db.Create{{ .ModelName }}Params) (*db.{{ .ModelName }}, error)
	GetByID(ctx context.Context, id {{ .PrimaryKeyType }}) (*db.{{ .ModelName }}, error)
	List(ctx context.Context) ([]db.{{ .ModelName }}, error)
	ListPaginated(ctx context.Context, limit, offset int32) ([]db.{{ .ModelName }}, error)
	Count(ctx context.Context) (int64, error)
	Update(ctx context.Context, params db.Update{{ .ModelName }}Params) (*db.{{ .ModelName }}, error)
	Delete(ctx context.Context, id {{ .PrimaryKeyType }}) error
{{- if .SoftDeletes }}
	Restore(ctx context.Context, id {{ .PrimaryKeyType }}) error
{{- end }}

{{- if .Relationships }}

	// Relationship loading
{{- range .Relationships }}
{{- if .IsSingle }}
	{{ .LoadMethod }}(ctx context.Context, entity *db.{{ $.ModelName }}) (*{{ .ModelType }}, error)
{{- end }}
{{- if .IsMany }}
	{{ .LoadMethod }}(ctx context.Context, entity *db.{{ $.ModelName }}) ([]{{ .ModelType }}, error)
	{{ .LoadManyMethod }}(ctx context.Context, entities []db.{{ $.ModelName }}) (map[{{ .ForeignKeyType }}][]{{ .ModelType }}, error)
{{- end }}
{{- if .IsM2M }}
	{{ .LoadMethod }}(ctx context.Context, entity *db.{{ $.ModelName }}) ([]{{ .ModelType }}, error)
	{{ .LoadManyMethod }}(ctx context.Context, entities []db.{{ $.ModelName }}) (map[{{ .ForeignKeyType }}][]{{ .ModelType }}, error)
	{{ .AddMethod }}(ctx context.Context, entityID {{ .ForeignKeyType }}, relatedIDs ...{{ .ForeignKeyType }}) error
	{{ .RemoveMethod }}(ctx context.Context, entityID {{ .ForeignKeyType }}, relatedIDs ...{{ .ForeignKeyType }}) error
	{{ .SetMethod }}(ctx context.Context, entityID {{ .ForeignKeyType }}, relatedIDs []{{ .ForeignKeyType }}) error
{{- end }}
{{- end }}
{{- end }}
{{- if .HasAPILoadableRelationships }}

	// Relationship validation
	ValidateIncludes(includes []string) error
{{- end }}

	// Transaction support
	WithTx(ctx context.Context, fn func({{ .ModelName }}Repository) error) error
}
