// Code generated by Firebird. DO NOT EDIT.
// This file provides database connection utilities.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"os"
	"time"

	"{{ .ModulePath }}/db"
	{{ .DriverImport }}
)

// DB wraps the database connection and provides query access.
type DB struct {
	conn    *sql.DB
	queries *db.Queries
}

// NewFromConfig creates a database connection using DATABASE_URL environment variable.
// Falls back to reading from firebird.yml if DATABASE_URL is not set.
func NewFromConfig() (*DB, error) {
	connString := os.Getenv("DATABASE_URL")
	if connString == "" {
		// TODO: Read from firebird.yml
		return nil, fmt.Errorf("DATABASE_URL environment variable not set")
	}
	return New(connString)
}

// New creates a new database connection with the given connection string.
func New(connString string) (*DB, error) {
	conn, err := sql.Open("{{ .DriverName }}", connString)
	if err != nil {
		return nil, fmt.Errorf("opening database: %w", err)
	}

	// Verify connection
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := conn.PingContext(ctx); err != nil {
		return nil, fmt.Errorf("pinging database: %w", err)
	}

	return &DB{
		conn:    conn,
		queries: db.New(conn),
	}, nil
}

// Queries returns the SQLC queries instance for executing type-safe queries.
func (d *DB) Queries() *db.Queries {
	return d.queries
}

// Close closes the database connection.
func (d *DB) Close() error {
	return d.conn.Close()
}

// Begin starts a new database transaction.
func (d *DB) Begin(ctx context.Context) (*sql.Tx, error) {
	return d.conn.BeginTx(ctx, nil)
}

// WithTx executes a function within a transaction.
// If the function returns an error, the transaction is rolled back.
// Otherwise, the transaction is committed.
func (d *DB) WithTx(ctx context.Context, fn func(*db.Queries) error) error {
	tx, err := d.Begin(ctx)
	if err != nil {
		return err
	}

	defer func() {
		if p := recover(); p != nil {
			_ = tx.Rollback()
			panic(p)
		} else if err != nil {
			_ = tx.Rollback()
		} else {
			err = tx.Commit()
		}
	}()

	return fn(d.queries.WithTx(tx))
}
