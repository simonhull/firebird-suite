package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{ .Module }}/internal/config"
	"{{ .Module }}/internal/routes"
{{- if .HasRealtime }}
	"{{ .Module }}/internal/events"
	"{{ .Module }}/internal/realtime"
{{- end }}
)

func main() {
	// Load configuration
	cfg := config.MustLoad()

	// Initialize logger
	logger := config.NewLogger(cfg)
	logger.Info("Starting {{ .Name }}", "port", cfg.Application.Server.Port)

{{- if .HasRealtime }}
	// Initialize EventBus
	var eventBus events.EventBus
	{{- if eq .RealtimeBackend "nats" }}
	eventBus = events.NewNATSBus(cfg.Application.Realtime.NatsURL, logger)
	{{- else }}
	eventBus = events.NewMemoryBus(logger)
	{{- end }}
	defer func() {
		if err := eventBus.Close(); err != nil {
			logger.Error("failed to close event bus", "error", err.Error())
		}
	}()

	// Initialize WebSocket infrastructure
	connManager := realtime.NewConnectionManager(eventBus, logger)

	logger.Info("real-time features enabled", "backend", "{{ .RealtimeBackend }}")
{{- end }}

	// Setup routes
	mux := routes.RegisterRoutes(logger{{if .HasRealtime}}, connManager{{end}})

	// Start server
	addr := fmt.Sprintf("%s:%d", cfg.Application.Server.Host, cfg.Application.Server.Port)
	server := &http.Server{
		Addr:         addr,
		Handler:      mux,
		ReadTimeout:  cfg.Application.Server.ReadTimeout,
		WriteTimeout: cfg.Application.Server.WriteTimeout,
		IdleTimeout:  60 * time.Second,
	}

	// Start server in goroutine
	serverErrors := make(chan error, 1)
	go func() {
		logger.Info("Server listening", "address", addr)
		serverErrors <- server.ListenAndServe()
	}()

	// Wait for interrupt signal
	shutdown := make(chan os.Signal, 1)
	signal.Notify(shutdown, os.Interrupt, syscall.SIGTERM)

	select {
	case err := <-serverErrors:
		log.Fatalf("Server failed: %v", err)
	case sig := <-shutdown:
		logger.Info("shutdown signal received", "signal", sig.String())

		ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
		defer cancel()

		if err := server.Shutdown(ctx); err != nil {
			logger.Error("graceful shutdown failed", "error", err.Error())
			os.Exit(1)
		}
	}

	logger.Info("server stopped")
}
