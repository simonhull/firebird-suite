// Code generated by Firebird. Edit freely - this file is yours.
package dto

import (
{{- if .HasTime }}
	"time"
{{- end }}
{{- if .HasUUID }}

	"github.com/google/uuid"
{{- end }}

	"{{ .ModulePath }}/db"
)

// {{ .ModelName }}Response represents a {{ .ModelName }} in API responses.
// Generated from schema. Customize as needed.
//
// Fields excluded from responses:
{{- range .ExcludedFields }}
//   - {{ . }} (internal or sensitive)
{{- end }}
type {{ .ModelName }}Response struct {
{{- range .Fields }}
	{{ .Name }} {{ .Type }} `json:"{{ .JSONTag }}{{ if .Omitempty }},omitempty{{ end }}"`
{{- end }}
{{- if .Relationships }}

	// Relationships (loaded on demand via ?include parameter)
{{- range .Relationships }}
	{{ .Name }} {{ .ResponseType }} `json:"{{ .JSONTag }},omitempty"`
{{- end }}
{{- end }}
}

// From{{ .ModelName }} converts a database model to a response DTO.
func From{{ .ModelName }}(model *db.{{ .ModelName }}) *{{ .ModelName }}Response {
	if model == nil {
		return nil
	}

	return &{{ .ModelName }}Response{
{{- range .Fields }}
		{{ .Name }}: model.{{ .DBFieldName }},
{{- end }}
{{- if .Relationships }}
		// Relationships are nil by default, populated via Load functions
{{- end }}
	}
}

// From{{ .ModelName }}List converts a slice of database models to response DTOs.
func From{{ .ModelName }}List(models []db.{{ .ModelName }}) []*{{ .ModelName }}Response {
	if models == nil {
		return nil
	}

	responses := make([]*{{ .ModelName }}Response, len(models))
	for i := range models {
		responses[i] = From{{ .ModelName }}(&models[i])
	}
	return responses
}

// TODO: Add custom response formatting or computed fields here
// Example:
//
// func (r *{{ .ModelName }}Response) WithComputedField() *{{ .ModelName }}Response {
//     // Add computed fields
//     return r
// }
