// Code generated by Firebird. Edit freely - this file is yours.
package services

import (
	"log/slog"

	"github.com/go-playground/validator/v10"
	"{{ .ModulePath }}/internal/db"
	"{{ .ModulePath }}/internal/repositories"
	"{{ .ModulePath }}/internal/services/generated"
)

// {{ .ModelName }}Service handles {{ .ModelName }} business logic
//
// Generated methods (via {{ .ModelName }}ServiceBase):
//   - Create(ctx, input) (*dto.{{ .ModelName }}Response, error)
//   - GetByID(ctx, id) (*dto.{{ .ModelName }}Response, error)
//   - List(ctx, page) (*ListResult[*dto.{{ .ModelName }}Response], error)
//   - Update(ctx, id, input) (*dto.{{ .ModelName }}Response, error)
//   - Delete(ctx, id) error
{{- if .SoftDeletes }}
//   - Restore(ctx, id) error
{{- end }}
//
// Add custom business logic below.
type {{ .ModelName }}Service struct {
	generated.{{ .ModelName }}ServiceBase
}

// New{{ .ModelName }}Service creates a new {{ .ModelName }} service
func New{{ .ModelName }}Service(
	{{ .RepoFieldName }} repositories.{{ .ModelName }}Repository,
	database *db.DB,
	logger *slog.Logger,
	validator *validator.Validate,
) *{{ .ModelName }}Service {
	return &{{ .ModelName }}Service{
		{{ .ModelName }}ServiceBase: generated.{{ .ModelName }}ServiceBase{
			{{ .RepoFieldName }}: {{ .RepoFieldName }},
			DB:                   database,
			Logger:               logger.With(slog.String("service", "{{ .ModelName }}")),
			Validator:            validator,
		},
	}
}

// Add custom methods here:
//
// Example: Business validation
// func (s *{{ .ModelName }}Service) validateBusinessRules(ctx context.Context, input dto.Create{{ .ModelName }}Input) error {
//     // Check uniqueness, relationships, state, etc.
//     return nil
// }
//
// Example: Multi-repo transaction
// func (s *{{ .ModelName }}Service) CreateWithRelated(ctx context.Context, input CustomInput) error {
//     return s.DB.WithTx(ctx, func(tx *sql.Tx) error {
//         {{ .RepoFieldName }} := s.{{ .RepoFieldName }}.WithTx(tx)
//         // Use transaction-scoped repo
//         return nil
//     })
// }
