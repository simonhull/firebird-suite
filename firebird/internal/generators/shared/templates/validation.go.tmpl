// Code generated by Firebird. DO NOT EDIT.

package helpers

import (
	"fmt"
	"reflect"

	"github.com/go-playground/validator/v10"
)

var validate *validator.Validate

func init() {
	validate = validator.New()

	// Register custom validators here if needed
	// validate.RegisterValidation("customTag", customValidatorFunc)
}

// ValidateStruct validates any struct with validation tags
func ValidateStruct(s interface{}) error {
	return validate.Struct(s)
}

// ValidationErrorResponse converts validator errors to API-friendly format
func ValidationErrorResponse(err error) map[string]string {
	errors := make(map[string]string)

	if err == nil {
		return errors
	}

	validationErrs, ok := err.(validator.ValidationErrors)
	if !ok {
		errors["_general"] = err.Error()
		return errors
	}

	for _, fieldErr := range validationErrs {
		// Use JSON field name if available, otherwise use struct field name
		fieldName := fieldErr.Field()
		errors[fieldName] = formatValidationError(fieldErr)
	}

	return errors
}

func formatValidationError(err validator.FieldError) string {
	switch err.Tag() {
	case "required":
		return "This field is required"
	case "email":
		return "Must be a valid email address"
	case "min":
		if err.Type().Kind() == reflect.String {
			return fmt.Sprintf("Must be at least %s characters long", err.Param())
		}
		return fmt.Sprintf("Must be at least %s", err.Param())
	case "max":
		if err.Type().Kind() == reflect.String {
			return fmt.Sprintf("Must be at most %s characters long", err.Param())
		}
		return fmt.Sprintf("Must be at most %s", err.Param())
	case "gte":
		return fmt.Sprintf("Must be greater than or equal to %s", err.Param())
	case "lte":
		return fmt.Sprintf("Must be less than or equal to %s", err.Param())
	case "gt":
		return fmt.Sprintf("Must be greater than %s", err.Param())
	case "lt":
		return fmt.Sprintf("Must be less than %s", err.Param())
	case "oneof":
		return fmt.Sprintf("Must be one of: %s", err.Param())
	case "url":
		return "Must be a valid URL"
	case "uri":
		return "Must be a valid URI"
	case "alpha":
		return "Must contain only letters"
	case "alphanum":
		return "Must contain only letters and numbers"
	case "numeric":
		return "Must be a valid number"
	case "uuid":
		return "Must be a valid UUID"
	case "uuid4":
		return "Must be a valid UUID v4"
	case "len":
		return fmt.Sprintf("Must be exactly %s characters long", err.Param())
	case "eq":
		return fmt.Sprintf("Must be equal to %s", err.Param())
	case "ne":
		return fmt.Sprintf("Must not be equal to %s", err.Param())
	case "eqfield":
		return fmt.Sprintf("Must match %s", err.Param())
	case "nefield":
		return fmt.Sprintf("Must not match %s", err.Param())
	case "gtfield":
		return fmt.Sprintf("Must be greater than %s", err.Param())
	case "ltfield":
		return fmt.Sprintf("Must be less than %s", err.Param())
	default:
		return fmt.Sprintf("Validation failed on '%s'", err.Tag())
	}
}
