// Code generated by Firebird. Edit freely - this file is yours.
package handlers

import (
	"net/http"
	"strconv"

	"github.com/google/uuid"
	"{{ .ModulePath }}/internal/services"
)

// ParsePagination extracts pagination parameters from query string
func ParsePagination(r *http.Request) services.Pagination {
	page := 1
	perPage := 20

	if p := r.URL.Query().Get("page"); p != "" {
		if parsed, err := strconv.Atoi(p); err == nil && parsed > 0 {
			page = parsed
		}
	}

	if pp := r.URL.Query().Get("per_page"); pp != "" {
		if parsed, err := strconv.Atoi(pp); err == nil && parsed > 0 {
			perPage = parsed
		}
	}

	return services.NewPagination(page, perPage)
}

// ParseUUID extracts and validates a UUID from a string
func ParseUUID(s string) (uuid.UUID, error) {
	return uuid.Parse(s)
}

// ParseInt64ID extracts and validates an int64 ID from a string
func ParseInt64ID(s string) (int64, error) {
	return strconv.ParseInt(s, 10, 64)
}

// TODO: Add custom parsing helpers here
// Examples:
//
// func ParseDateRange(r *http.Request) (start, end time.Time, err error) {
//     startStr := r.URL.Query().Get("start_date")
//     endStr := r.URL.Query().Get("end_date")
//     // Parse dates...
// }
//
// func ParseSortOrder(r *http.Request) string {
//     sort := r.URL.Query().Get("sort")
//     if sort == "" {
//         return "created_at" // default
//     }
//     return sort
// }
