-- Code generated by Firebird. Edit as needed.
-- Query file for {{ .ModelName }}

-- name: Create{{ .ModelName }} :one
INSERT INTO {{ .TableName }} ({{ .InsertFields }})
VALUES ({{ .InsertParams }})
{{- if .SupportsReturning }}
RETURNING *
{{- end }};

-- name: Get{{ .ModelName }} :one
SELECT {{ .SelectColumns }}
FROM {{ .TableName }}
WHERE id = {{ .IDParam }}{{ .SoftDeleteWhere }};

-- name: List{{ .ModelName }}s :many
SELECT {{ .SelectColumns }}
FROM {{ .TableName }}
{{- if .SoftDeletes }}
WHERE deleted_at IS NULL
{{- end }}
{{- if .HasTimestamps }}
ORDER BY created_at DESC
{{- else }}
ORDER BY id DESC
{{- end }};

-- name: List{{ .ModelName }}sPaginated :many
SELECT {{ .SelectColumns }}
FROM {{ .TableName }}
{{- if .SoftDeletes }}
WHERE deleted_at IS NULL
{{- end }}
{{- if .HasTimestamps }}
ORDER BY created_at DESC
{{- else }}
ORDER BY id DESC
{{- end }}
LIMIT {{ .LimitParam }} OFFSET {{ .OffsetParam }};

-- name: Count{{ .ModelName }}s :one
SELECT COUNT(*)
FROM {{ .TableName }}
{{- if .SoftDeletes }}
WHERE deleted_at IS NULL
{{- end }};

-- name: Update{{ .ModelName }} :one
UPDATE {{ .TableName }}
SET {{ .UpdateFields }}
WHERE id = {{ .WhereIDParam }}{{ .SoftDeleteWhere }}
{{- if .SupportsReturning }}
RETURNING *
{{- end }};

{{- if .SoftDeletes }}

-- name: Delete{{ .ModelName }} :exec
UPDATE {{ .TableName }}
SET deleted_at = {{ .TimestampFunc }}
WHERE id = {{ .IDParam }} AND deleted_at IS NULL;

-- name: Restore{{ .ModelName }} :exec
UPDATE {{ .TableName }}
SET deleted_at = NULL
WHERE id = {{ .IDParam }};

-- name: PermanentDelete{{ .ModelName }} :exec
DELETE FROM {{ .TableName }}
WHERE id = {{ .IDParam }};
{{- else }}

-- name: Delete{{ .ModelName }} :exec
DELETE FROM {{ .TableName }}
WHERE id = {{ .IDParam }};
{{- end }}
{{- if .SupportsCursorPagination }}

-- ==========================================
-- Cursor-Based Pagination
-- ==========================================

-- name: List{{ .ModelName }}sFirst :many
SELECT {{ .SelectColumns }}
FROM {{ .TableName }}
{{- if .SoftDeletes }}
WHERE deleted_at IS NULL
{{- end }}
ORDER BY {{ .CursorField }} DESC
LIMIT {{ .LimitParam }};

-- name: List{{ .ModelName }}sAfter :many
SELECT {{ .SelectColumns }}
FROM {{ .TableName }}
WHERE {{ .CursorField }} < {{ .LimitParam }}
{{- if .SoftDeletes }}
  AND deleted_at IS NULL
{{- end }}
ORDER BY {{ .CursorField }} DESC
LIMIT {{ .OffsetParam }};

-- name: List{{ .ModelName }}sBefore :many
SELECT {{ .SelectColumns }}
FROM {{ .TableName }}
WHERE {{ .CursorField }} > {{ .LimitParam }}
{{- if .SoftDeletes }}
  AND deleted_at IS NULL
{{- end }}
ORDER BY {{ .CursorField }} ASC
LIMIT {{ .OffsetParam }};
{{- end }}
{{- if .Relationships }}

-- ==========================================
-- Relationship Loading Queries
-- ==========================================
{{- range .Relationships }}

{{- if eq .Type "belongs_to" }}
-- name: {{ .GetSingleQueryName }} :one
SELECT * FROM {{ .TargetTable }}
WHERE id = {{ $.IDParam }};
{{- end }}

{{- if eq .Type "has_many" }}
-- name: {{ .GetSingleQueryName }} :many
SELECT * FROM {{ .TargetTable }}
WHERE {{ .ForeignKey }} = {{ $.IDParam }}
{{- if $.SoftDeletes }}
  AND deleted_at IS NULL
{{- end }}
ORDER BY created_at DESC;

-- name: {{ .GetManyQueryName }} :many
SELECT * FROM {{ .TargetTable }}
WHERE {{ .ForeignKey }} = ANY({{ $.IDParam }}::{{ .PrimaryKeyType }}[])
{{- if $.SoftDeletes }}
  AND deleted_at IS NULL
{{- end }}
ORDER BY {{ .ForeignKey }}, created_at DESC;
{{- end }}

{{- if eq .Type "many_to_many" }}
-- name: {{ .GetSingleQueryName }} :many
SELECT t.* FROM {{ .TargetTable }} t
INNER JOIN {{ .JunctionTable }} jt ON jt.{{ .RelatedKey }} = t.id
WHERE jt.{{ .ForeignKey }} = {{ $.IDParam }}
{{- if .TargetSoftDeletes }}
  AND t.deleted_at IS NULL
{{- end }}
{{- if .OrderBy }}
ORDER BY t.{{ .OrderBy }}
{{- else }}
ORDER BY t.id
{{- end }};

-- name: {{ .GetManyQueryName }} :many
SELECT jt.{{ .ForeignKey }}, t.* FROM {{ .TargetTable }} t
INNER JOIN {{ .JunctionTable }} jt ON jt.{{ .RelatedKey }} = t.id
WHERE jt.{{ .ForeignKey }} = ANY({{ $.IDParam }}::{{ .PrimaryKeyType }}[])
{{- if .TargetSoftDeletes }}
  AND t.deleted_at IS NULL
{{- end }}
{{- if .OrderBy }}
ORDER BY jt.{{ .ForeignKey }}, t.{{ .OrderBy }}
{{- else }}
ORDER BY jt.{{ .ForeignKey }}, t.id
{{- end }};

-- name: {{ .AddQueryName }} :exec
INSERT INTO {{ .JunctionTable }} ({{ .ForeignKey }}, {{ .RelatedKey }})
VALUES ({{ $.IDParam }}, {{ $.OffsetParam }})
ON CONFLICT DO NOTHING;

-- name: {{ .RemoveQueryName }} :exec
DELETE FROM {{ .JunctionTable }}
WHERE {{ .ForeignKey }} = {{ $.IDParam }} AND {{ .RelatedKey }} = {{ $.OffsetParam }};

-- name: {{ .RemoveAllQueryName }} :exec
DELETE FROM {{ .JunctionTable }}
WHERE {{ .ForeignKey }} = {{ $.IDParam }};
{{- end }}

{{- end }}
{{- end }}
