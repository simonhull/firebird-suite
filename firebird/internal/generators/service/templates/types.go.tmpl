// Code generated by Firebird. Edit freely - this file is yours.
package services

// Pagination parameters for list queries
type Pagination struct {
	Page    int // Page number (1-indexed)
	PerPage int // Items per page
}

// NewPagination creates pagination with defaults
func NewPagination(page, perPage int) Pagination {
	if page < 1 {
		page = 1
	}
	if perPage < 1 {
		perPage = 20 // Default
	}
	if perPage > 100 {
		perPage = 100 // Max to prevent abuse
	}
	return Pagination{Page: page, PerPage: perPage}
}

// Offset calculates the database offset
func (p Pagination) Offset() int {
	return (p.Page - 1) * p.PerPage
}

// ListResult contains paginated results with metadata
type ListResult[T any] struct {
	Items      []T   `json:"items"`
	Total      int64 `json:"total"`
	Page       int   `json:"page"`
	PerPage    int   `json:"per_page"`
	TotalPages int   `json:"total_pages"`
}

// NewListResult creates a paginated result
func NewListResult[T any](items []T, total int64, page Pagination) *ListResult[T] {
	totalPages := int((total + int64(page.PerPage) - 1) / int64(page.PerPage))
	if totalPages < 1 {
		totalPages = 1
	}

	return &ListResult[T]{
		Items:      items,
		Total:      total,
		Page:       page.Page,
		PerPage:    page.PerPage,
		TotalPages: totalPages,
	}
}
