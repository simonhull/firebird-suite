// Code generated by Firebird. Edit freely - this file is yours.
package handlers

import (
	"github.com/go-chi/chi/v5"
	"{{ .ModulePath }}/internal/services"
{{- if .RealtimeEnabled }}
	"{{ .ModulePath }}/internal/realtime"
	"log/slog"
{{- end }}
)

// RegisterRoutes sets up all application routes using Chi router
func RegisterRoutes(r chi.Router, services *ServiceContainer{{if .RealtimeEnabled}}, connManager *realtime.ConnectionManager, logger *slog.Logger{{end}}) {
{{- if .RealtimeEnabled }}
	// WebSocket endpoint
	wsHandler := NewWebSocketHandler(connManager, logger)
	r.Get("/ws", wsHandler.HandleWebSocket)
{{- end }}

{{- range .Handlers }}
	// {{ .ModelName }} routes
	{{ .VarName }} := New{{ .Name }}(services.{{ .ModelName }})
	r.Route("/{{ .ModelPlural }}", func(r chi.Router) {
		r.Get("/", {{ .VarName }}.Index)
		r.Post("/", {{ .VarName }}.Store)
		r.Get("/{id}", {{ .VarName }}.Show)
		r.Put("/{id}", {{ .VarName }}.Update)
		r.Delete("/{id}", {{ .VarName }}.Destroy)
	})
{{- end }}

	// TODO: Add custom routes here
}

// ServiceContainer holds all service dependencies
type ServiceContainer struct {
{{- range .Handlers }}
	{{ .ModelName }} services.{{ .ModelName }}Service
{{- end }}
}
