// Code generated by Firebird. DO NOT EDIT.

package helpers

import (
	"encoding/json"
	"errors"
	"net/http"

	apperrors "{{ .ModulePath }}/internal/errors"
)

// ErrorResponse wraps an error for JSON responses
type ErrorResponse struct {
	Error ErrorDetail `json:"error"`
}

// ErrorDetail contains error information
type ErrorDetail struct {
	Code    string                 `json:"code"`
	Message string                 `json:"message"`
	Details map[string]interface{} `json:"details,omitempty"`
}

// RespondJSON writes a JSON response with the given status code
func RespondJSON(w http.ResponseWriter, status int, data interface{}) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(status)

	if err := json.NewEncoder(w).Encode(data); err != nil {
		// If encoding fails, log but don't try to write another response
		// (headers already sent)
		return
	}
}

// RespondError writes an error response with the appropriate HTTP status
func RespondError(w http.ResponseWriter, err error) {
	var appErr *apperrors.AppError

	// Convert to AppError if not already
	if !errors.As(err, &appErr) {
		appErr = apperrors.NewInternalError("An unexpected error occurred", err)
	}

	response := ErrorResponse{
		Error: ErrorDetail{
			Code:    appErr.Code,
			Message: appErr.Message,
			Details: appErr.Details,
		},
	}

	RespondJSON(w, appErr.HTTPStatus(), response)
}

// RespondSuccess writes a successful response with status 200
func RespondSuccess(w http.ResponseWriter, data interface{}) {
	RespondJSON(w, http.StatusOK, data)
}

// RespondCreated writes a successful response with status 201
func RespondCreated(w http.ResponseWriter, data interface{}) {
	RespondJSON(w, http.StatusCreated, data)
}

// RespondNoContent writes a successful response with status 204 and no body
func RespondNoContent(w http.ResponseWriter) {
	w.WriteHeader(http.StatusNoContent)
}

// RespondAccepted writes a successful response with status 202
func RespondAccepted(w http.ResponseWriter, data interface{}) {
	RespondJSON(w, http.StatusAccepted, data)
}
