// Code generated by Firebird. DO NOT EDIT.
package middleware

import (
	"net"
	"net/http"
	"sync"
	"time"

	"{{ .ModulePath }}/internal/config"
	"{{ .ModulePath }}/internal/errors"
	"{{ .ModulePath }}/internal/helpers"
	"golang.org/x/time/rate"
)

// visitor represents a rate limit tracker for an IP address
type visitor struct {
	limiter  *rate.Limiter
	lastSeen time.Time
}

// RateLimiter tracks rate limits per IP address
type RateLimiter struct {
	visitors map[string]*visitor
	mu       sync.RWMutex
	limit    rate.Limit
	burst    int
}

// NewRateLimiter creates a new rate limiter
func NewRateLimiter(requestsPerMin int, burst int) *RateLimiter {
	rl := &RateLimiter{
		visitors: make(map[string]*visitor),
		limit:    rate.Limit(float64(requestsPerMin) / 60.0), // Convert per-minute to per-second
		burst:    burst,
	}

	// Start cleanup routine to remove stale visitors
	go rl.cleanupVisitors()

	return rl
}

// getVisitor returns the rate limiter for the given IP address
func (rl *RateLimiter) getVisitor(ip string) *rate.Limiter {
	rl.mu.Lock()
	defer rl.mu.Unlock()

	v, exists := rl.visitors[ip]
	if !exists {
		limiter := rate.NewLimiter(rl.limit, rl.burst)
		rl.visitors[ip] = &visitor{limiter, time.Now()}
		return limiter
	}

	v.lastSeen = time.Now()
	return v.limiter
}

// cleanupVisitors removes visitors that haven't been seen in 3 minutes
func (rl *RateLimiter) cleanupVisitors() {
	ticker := time.NewTicker(time.Minute)
	defer ticker.Stop()

	for range ticker.C {
		rl.mu.Lock()
		for ip, v := range rl.visitors {
			if time.Since(v.lastSeen) > 3*time.Minute {
				delete(rl.visitors, ip)
			}
		}
		rl.mu.Unlock()
	}
}

// getIP extracts the IP address from the request
func getIP(r *http.Request) string {
	// Check X-Forwarded-For header first (for proxies/load balancers)
	forwarded := r.Header.Get("X-Forwarded-For")
	if forwarded != "" {
		// X-Forwarded-For can contain multiple IPs, use the first one
		if ip := net.ParseIP(forwarded); ip != nil {
			return forwarded
		}
	}

	// Check X-Real-IP header
	realIP := r.Header.Get("X-Real-IP")
	if realIP != "" {
		if ip := net.ParseIP(realIP); ip != nil {
			return realIP
		}
	}

	// Fall back to RemoteAddr
	ip, _, err := net.SplitHostPort(r.RemoteAddr)
	if err != nil {
		return r.RemoteAddr
	}
	return ip
}

// RateLimit returns a middleware that enforces rate limiting per IP address
func RateLimit(cfg *config.RateLimitConfig) func(http.Handler) http.Handler {
	limiter := NewRateLimiter(cfg.RequestsPerMin, cfg.Burst)

	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// Skip rate limiting if disabled
			if !cfg.Enabled {
				next.ServeHTTP(w, r)
				return
			}

			// Get client IP
			ip := getIP(r)

			// Get rate limiter for this IP
			limiter := limiter.getVisitor(ip)

			// Check if request is allowed
			if !limiter.Allow() {
				helpers.RespondError(w, errors.NewRateLimitError(cfg.RequestsPerMin))
				return
			}

			next.ServeHTTP(w, r)
		})
	}
}
